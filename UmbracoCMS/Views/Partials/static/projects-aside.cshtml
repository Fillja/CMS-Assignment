@using Umbraco.Cms.Web.Common.PublishedModels;
@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@inject Umbraco.Cms.Web.Common.UmbracoHelper UmbracoHelper

@{
    var pageTitle = ViewBag.Title?.ToString() ?? "";
    var rootContents = UmbracoHelper.ContentAtRoot();
    var settings = rootContents.FirstOrDefault(x => x.ContentType.Alias == "settingsPage") ?? null;

	var selection = Umbraco.Content(Guid.Parse("b192c7ef-3cb4-4911-ad7a-90097ca6acda"))
    .ChildrenOfType("projectItemTemplate")
    .Where(x => x.IsVisible());
    var latestSelection = selection.TakeLast(4);

    List<string> projectNames = new List<string>();
    foreach (var item in selection) { projectNames.Add(item.Name); }
    
}


<aside id="project-aside">

    <div class="aside-content">
        <div>
            @if (projectNames.Contains(pageTitle))
            {
                <h4>Recent Projects</h4>
                @foreach (var item in latestSelection)
                {
                    var thumbnailSmallImg = item?.Value<IPublishedContent>("thumbnailSmallImg")?.Url() ?? "";
                    var thumbnailText = item?.Value<string>("thumbnailText") ?? "";
                    var dateCreated = item?.Value<string>("dateCreated") ?? "";
                    var formatedDate = dateCreated.Substring(0, 9);

                    <div class="recent-projects">
                        <a href="@item.Url()" class="recent-project-box">
                            <img src="@thumbnailSmallImg">
                            <div>
                                <h6>@item.Name</h6>
                                <p class="project-date"><i class="fa-light fa-calendar-days"></i>@formatedDate</p>
                            </div>
                        </a>
                    </div>
                }
            }
        </div>

        <div>
            <h4>Tags</h4>
            <div class="tags">
                @{
                    var renderedTags = new HashSet<string>();
                }

                @foreach (var item in selection)
                {
                    var projectTags = item?.Value<IEnumerable<string>>("projectTags");

                    if (projectTags != null)
                    {
                        foreach (var tag in projectTags)
                        {
                            if (!renderedTags.Contains(tag))
                            {
                                <p>@tag</p>
                                renderedTags.Add(tag);
                            }
                        }
                    }
                }
            </div>
        </div>

    </div>

    @await Html.PartialAsync("aside-form.cshtml")
    
</aside>